)
length((unlist(edge_index))
)
length((unlist(edge_index)))
length(unique((unlist(edge_index))))
length(genes)
# R Application plots
#####################################
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]])
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,], best_com)
ids2 <- is.element(edge_index[2,], best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,])], 
genes[as.numeric(TOPCOMM_edges[2,])])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
edge_mask[IDS]
mean(edge_mask[IDS])
comms_scores
comms
comms[id]
length(comms_scores)
comms_scores
edge_mask
length(edge_mask)
dim(edge_index)
best_com
is.element(edge_index[1,], best_com)
is.element(best_com, edge_index[1,])
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOM_edges
TOPCOMM_edges
edge_mask[IDS]
edge_index
edge_index[,1:3]
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,], best_com)
ids2 <- is.element(edge_index[2,], best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,])], 
genes[as.numeric(TOPCOMM_edges[2,])])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
edge_mask[IDS]
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) 
best_com
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,], best_com)
ids2 <- is.element(edge_index[2,], best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,])], 
genes[as.numeric(TOPCOMM_edges[2,])])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
edge_mask[IDS]
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) 
# Best community
TOPCOMM  <- genes[best_com+1] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,], best_com)
ids2 <- is.element(edge_index[2,], best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,])], 
genes[as.numeric(TOPCOMM_edges[2,])])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
edge_mask[IDS]
# R Application plots
#####################################
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]])  + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,]+1, best_com)
ids2 <- is.element(edge_index[2,]+1, best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,])], 
genes[as.numeric(TOPCOMM_edges[2,])])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
edge_mask[IDS]
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,]+1, best_com)
ids2 <- is.element(edge_index[2,]+1, best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,]+1)], 
genes[as.numeric(TOPCOMM_edges[2,]+1)])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
edge_mask[IDS]
dim(TOPCOMM_edges_names)
length(IDS)
length(sum(IDS))
IDS
length(which(IDS))
which(IDS)
edge_mask[which(IDS)]
edge_mask[which(IDS)+1]
mean(edge_mask[which(IDS)+1])
mean(edge_mask[which(IDS)])
mean(edge_mask[which(IDS)-1])
mean(edge_mask[which(IDS)+2])
edge_mask
TOPCOMM_edges
as.numeric(TOPCOMM_edges[1,])
comms
sappy(comms, function(x){strsplit(x,",")})
sapply(comms, function(x){strsplit(x,",")})
unlist(sapply(comms, function(x){strsplit(x,",")}))
sapply(comms, function(x){strsplit(x,",")})
test <- sapply(comms, function(x){strsplit(x,",")})
test[1]
test[[1]]
test
sapply(test,unlist)
as.numeric(test)
as.vector(test)
is(test)
is(unlist(test))
unique(unlist(test))
length(unique(unlist(test)))
length(genes)
comm_scores
comms_scores
# R Application plots
#####################################
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,]+1, best_com)
ids2 <- is.element(edge_index[2,]+1, best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,]+1)], 
genes[as.numeric(TOPCOMM_edges[2,]+1)])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
edge_mask[IDS]
mean(edge_mask[IDS])
TOPCOMM_edge_imp = edge_mask[IDS]
library(reshape)
melt(TOPCOMM_edges_names)
TOPCOMM_edges_names
apply(TOPCOMM_edges_names,2,rbind)
t(TOPCOMM_edges_names)
MODULE <- cbind(t(TOPCOMM_edges_names), TOPCOMM_edge_imp)
MODULE
MODULE <- cbind(t(TOPCOMM_edges_names), TOPCOMM_edge_imp)
colnames(MODULE) <- c("gene1","gene2","IMP")
MODULE
library(igraph)
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=FALSE)
g
plot(g)
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=FALSE,  
edge.width = as.numeric(MODULE[,3]),
edge.label = as.numeric(MODULE[,3]),
edge.label.cex = 0.6))
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=FALSE,  
edge.width = as.numeric(MODULE[,3]),
edge.label = as.numeric(MODULE[,3]),
edge.label.cex = 0.6)
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=FALSE)
plot(g, 
edge.width = as.numeric(MODULE[,3]),
edge.label = as.numeric(MODULE[,3]),
edge.label.cex = 0.6)
}
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=FALSE)
plot(g, 
edge.width = as.numeric(MODULE[,3]),
edge.label = as.numeric(MODULE[,3]),
edge.label.cex = 0.6)
plot(g, 
edge.width = as.numeric(MODULE[,3])*10,
edge.label = as.numeric(MODULE[,3]),
edge.label.cex = 0.6)
plot(g, 
edge.width = as.numeric(MODULE[,3]),
edge.label = as.numeric(MODULE[,3]),
edge.label.cex = 0.6)
plot(g, 
edge.width = round(as.numeric(MODULE[,3]),digits=3),
edge.label = as.numeric(MODULE[,3]),
edge.label.cex = 0.6)
plot(g, 
edge.width = round(as.numeric(MODULE[,3]),digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g,vertex.shape="none", 
edge.width = round(as.numeric(MODULE[,3]),digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g,vertex.shape="none", 
edge.width = exp(round(as.numeric(MODULE[,3]),digits=3)),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g,vertex.shape="none", 
edge.width = exp(exp(round(as.numeric(MODULE[,3]), digits=3))),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g,vertex.shape="none", 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g,vertex.shape="none", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g,vertex.shape="none", 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=FALSE)
V(g)$color <- "black"
plot(g, vertex.shape="none", 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
V(g)$color <- "black"
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
MODULE
unique(g)
MODULE
unique(MODULE)
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=TRUE)
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=TRUE)
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
g
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
pdf("~/GNN-SubNet-Project/DiseaseModule.pdf")
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
dev.off()
# R Application plots
#####################################
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,]+1, best_com)
ids2 <- is.element(edge_index[2,]+1, best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,]+1)], 
genes[as.numeric(TOPCOMM_edges[2,]+1)])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
TOPCOMM_edge_imp = edge_mask[IDS]
MODULE <- cbind(t(TOPCOMM_edges_names), TOPCOMM_edge_imp)
colnames(MODULE) <- c("gene1","gene2","IMP")
MODULE
comms_scores
best_com
comms_scores[id]
comms
comms[1]
comms[2]
comms[3]
comms[4]
comms[5]
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=TRUE)
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
# R Application plots
#####################################
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,]+1, best_com)
ids2 <- is.element(edge_index[2,]+1, best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,]+1)], 
genes[as.numeric(TOPCOMM_edges[2,]+1)])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
TOPCOMM_edge_imp = edge_mask[IDS]
MODULE <- cbind(t(TOPCOMM_edges_names), TOPCOMM_edge_imp)
colnames(MODULE) <- c("gene1","gene2","IMP")
comms_scores
MODULE
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=TRUE)
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
comms
comms_scores
comms_scores[32]
comms_scores[id]
sort(comms_scores)
comms_scores[4]
comms[4]
# R Application plots
#####################################
comms <- read.table("~/LinkedOmics/KIRC-RANDOM/communities.txt")[[1]]
comms_scores <- read.table("~/LinkedOmics/KIRC-RANDOM/communities_scores.txt")[[1]]
genes <- read.table("~/LinkedOmics/KIRC-RANDOM/gene_names.txt")
genes <- unlist(genes)
id <- which.max(comms_scores)
comms_scores[id]
best_com <- comms[id]
best_com <- as.numeric(strsplit(best_com,",")[[1]]) + 1
# Best community
TOPCOMM  <- genes[best_com] 
edge_mask  <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_masks.txt")[[1]]
edge_index <- read.table("~/LinkedOmics/KIRC-RANDOM/edge_index.txt")
ids1 <- is.element(edge_index[1,]+1, best_com)
ids2 <- is.element(edge_index[2,]+1, best_com)
IDS  <- ids1 & ids2
TOPCOMM_edges <- edge_index[,IDS] 
TOPCOMM_edges_names <- rbind(genes[as.numeric(TOPCOMM_edges[1,]+1)], 
genes[as.numeric(TOPCOMM_edges[2,]+1)])
colnames(TOPCOMM_edges_names) <- NULL
TOPCOMM_edges_names 
TOPCOMM_edge_imp = edge_mask[IDS]
MODULE <- cbind(t(TOPCOMM_edges_names), TOPCOMM_edge_imp)
colnames(MODULE) <- c("gene1","gene2","IMP")
# Plot the detected disease module
g  <- graph_from_edgelist(as.matrix(MODULE[,1:2]), directed=TRUE)
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
pdf("DISEASE_MODULE.pdf")
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
length(genes)
dev.off()
getwd()
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
pdf("~/GNN-SubNet-Project/DISEASE_MODULE.pdf")
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
dev.off()
pdf("~/GNN-SubNet-Project/DISEASE_MODULE.pdf")
plot(g, vertex.shape="none", vertex.color="black", 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
dev.off()
plot(g, vertex.shape="none", vertex.color="black",layout=layout.circle, 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
plot(g, vertex.shape="none", vertex.color="black",layout=layout.circle, 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
pdf("~/GNN-SubNet-Project/DISEASE_MODULE.pdf")
plot(g, vertex.shape="none", vertex.color="black",layout=layout.circle, 
edge.width = round(as.numeric(MODULE[,3])*3, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.6)
dev.off()
pdf("~/GNN-SubNet-Project/DISEASE_MODULE.pdf")
plot(g, vertex.shape="none", vertex.color="black",layout=layout.circle, 
edge.width = round(as.numeric(MODULE[,3])*5, digits=3),
edge.label = round(as.numeric(MODULE[,3]), digits=3),
edge.label.cex = 0.8)
dev.off()
length(genes)
edge_mask
length(edge_mask)
TOPCOMM_edges_names
dim(TOPCOMM_edges_names)
comms
TOPCOMM  <- genes[best_com] 
TOPCOMM
q()
q()
